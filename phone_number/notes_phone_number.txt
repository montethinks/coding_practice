Write a program that cleans up user-entered phone numbers so that they can be sent as SMS messages.

The rules are as follows:

If the phone number is less than 10 digits assume that it is bad number
If the phone number is 10 digits assume that it is good
If the phone number is 11 digits and the first number is 1, trim the 1 and use the last 10 digits
If the phone number is 11 digits and the first number is not 1, then it is a bad number
If the phone number is more than 11 digits assume that it is a bad number

input: string digits
output: string valid phone_number

- remove all special characters and spaces
  - gsub(regex, '')

- check for total number of digits (characters)
  bad_number?
   - less than 10 digits
   - greater than 11 
    - number < 10 && number > 11
   - phone number == 11 && phone_number[0] != 1 # first digit not 1

  good_number?
   - number == 10 digits


=================
   FIRST DRAFT
=================
class PhoneNumber
  def initialize(phone_number)
    @number = phone_number #.gsub(/\D/, '') # remove chars when intitializing
  end

  def number
    if @number.match?(/[a-zA-Z]/) && @number.length > 10
      return '0' * 10
    end

    phone_number = @number.gsub(/\D/, '')
    number_digits = phone_number.length

    return '0' * 10 if number_digits < 10

    if number_digits > 11
      return '0' * 10
    elsif phone_number[0] == '1' && number_digits == 11
      return phone_number[1..number_digits - 1]
    elsif number_digits >= 11 && phone_number[0] != '1'
      return '0' * 10
    end

    phone_number
  end

  def area_code
    self.number[0..2]
  end

  def to_s
    number = self.number
    "(#{number[0..2]}) #{number[3..5]}-#{number[6..9]}"
  end
end

p PhoneNumber.new('19876543210').number
