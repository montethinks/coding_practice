Write a program that will convert a trinary number, represented as a string (e.g. '102012'), to its decimal equivalent using first principles (without using an existing method or library that can work with numeral systems).

Trinary numbers can only contain three symbols: 0, 1, and 2. Invalid trinary entries should convert to decimal number 0.

The last place in a trinary number is the 1's place. The second to last is the 3's place, the third to last is the 9's place, etc.

# "102012"
    1       0       2       0       1       2    # the number
1*3^5 + 0*3^4 + 2*3^3 + 0*3^2 + 1*3^1 + 2*3^0    # the value
  243 +     0 +    54 +     0 +     3 +     2 =  302

input: string of digits that is a trinary number (0 1 2): '102012'
output: decimal integer number: 302
rules: trinary number can only contain 0, 1, or 2
       invalid trinary entries convert to zero
algorithm / approach: 
        - convert string to an array of integers (on input) [1, 0, 2, 0, 1,  2]
        - range from 5.downto(0) 
        - each element in input array (map)
          - multiply current element * 3**5, next iteration current_element * 3**4, etc
        - reduce to final number
        - return final number

def trinary(trinary_number)
  digits = trinary_number.chars.map(&:to_i) # [1, 0, 2, 0, 1, 2]
  exponent_values = [5, 4, 3, 2, 1, 0]
  result = []

  digits.size.times do |index|
    result << (digits[index] * (3**exponent_values[index]))
  end

  result.reduce(:+)
end