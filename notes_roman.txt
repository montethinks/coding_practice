p 1990.to_roman

p 1.to_roman
p 4.to_roman
p 400.to_roman
p 20.to_roman

p to_roman(20)
p to_roman(141)
p to_roman(1990)

input: is calling the method on an integer
output: roman numeral string representation
rules: example 1990
       - 1000=X
       - 900=CM
       - 90=XC

 - Start with left most digit and express that roman numeral
 - Skip any zero

2   7
10 * number + number * 1

1      9       9      0
number * 1000 + number * 100 + number * 10 + number * 1




4 digits [1000, 100, 10, 1]
3 digitis [100, 10, 1]
2 digits [10, 1]
1 digit 1

 

 1990 == 'MCMXC'
 2008 == 'MMXIII'
  

  
def to_roman
    roman_numeral_key = {
      1 => 'I',
      4 => 'IV',
      5 => 'V',
      9 => 'IX',
      10 => 'X',
      40 => 'XL',
      50 => 'L',
      90 => 'XC',
      100 => 'C',
      400 => 'CD',
      500 => 'D',
      900 => 'CM',
      1000 => 'M'
    }

    digits = self.to_s.chars
    number_places = [1000, 100, 10, 1]
    converted_number = []
    roman_numerals = []

    append_zeros(digits) if digits.size < 4

    digits.map(&:to_i).each_with_index do |digit, idx|
      converted_number << digit * number_places[idx]
    end

    converted_number.each do |num|
      roman_numerals << roman_numeral_key.fetch(num, "not found") unless num == 0
    end
    roman_numerals.join("")
  end

  def append_zeros(digits)
    number_to_append = 4 - digits.size

    number_to_append.times do |_|
      digits.unshift("0")
    end

    digits
  end
end